// source: threadsnet.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck


var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.threads.net.pb.AddRecordReply', null, global);
goog.exportSymbol('proto.threads.net.pb.AddRecordRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.AddReplicatorReply', null, global);
goog.exportSymbol('proto.threads.net.pb.AddReplicatorRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.AddThreadRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.CreateRecordRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.CreateThreadRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.DeleteThreadReply', null, global);
goog.exportSymbol('proto.threads.net.pb.DeleteThreadRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.GetHostIDReply', null, global);
goog.exportSymbol('proto.threads.net.pb.GetHostIDRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.GetRecordReply', null, global);
goog.exportSymbol('proto.threads.net.pb.GetRecordRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.GetThreadRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.GetTokenReply', null, global);
goog.exportSymbol('proto.threads.net.pb.GetTokenReply.PayloadCase', null, global);
goog.exportSymbol('proto.threads.net.pb.GetTokenRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.GetTokenRequest.PayloadCase', null, global);
goog.exportSymbol('proto.threads.net.pb.Keys', null, global);
goog.exportSymbol('proto.threads.net.pb.LogInfo', null, global);
goog.exportSymbol('proto.threads.net.pb.NewRecordReply', null, global);
goog.exportSymbol('proto.threads.net.pb.PullThreadReply', null, global);
goog.exportSymbol('proto.threads.net.pb.PullThreadRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.Record', null, global);
goog.exportSymbol('proto.threads.net.pb.SubscribeRequest', null, global);
goog.exportSymbol('proto.threads.net.pb.ThreadInfoReply', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.GetHostIDRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.GetHostIDRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.GetHostIDRequest.displayName = 'proto.threads.net.pb.GetHostIDRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.GetHostIDReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.GetHostIDReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.GetHostIDReply.displayName = 'proto.threads.net.pb.GetHostIDReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.GetTokenRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.threads.net.pb.GetTokenRequest.oneofGroups_);
};
goog.inherits(proto.threads.net.pb.GetTokenRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.GetTokenRequest.displayName = 'proto.threads.net.pb.GetTokenRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.GetTokenReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.threads.net.pb.GetTokenReply.oneofGroups_);
};
goog.inherits(proto.threads.net.pb.GetTokenReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.GetTokenReply.displayName = 'proto.threads.net.pb.GetTokenReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.CreateThreadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.CreateThreadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.CreateThreadRequest.displayName = 'proto.threads.net.pb.CreateThreadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.Keys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.Keys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.Keys.displayName = 'proto.threads.net.pb.Keys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.ThreadInfoReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.net.pb.ThreadInfoReply.repeatedFields_, null);
};
goog.inherits(proto.threads.net.pb.ThreadInfoReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.ThreadInfoReply.displayName = 'proto.threads.net.pb.ThreadInfoReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.LogInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.net.pb.LogInfo.repeatedFields_, null);
};
goog.inherits(proto.threads.net.pb.LogInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.LogInfo.displayName = 'proto.threads.net.pb.LogInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.AddThreadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.AddThreadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.AddThreadRequest.displayName = 'proto.threads.net.pb.AddThreadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.GetThreadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.GetThreadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.GetThreadRequest.displayName = 'proto.threads.net.pb.GetThreadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.PullThreadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.PullThreadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.PullThreadRequest.displayName = 'proto.threads.net.pb.PullThreadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.PullThreadReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.PullThreadReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.PullThreadReply.displayName = 'proto.threads.net.pb.PullThreadReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.DeleteThreadRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.DeleteThreadRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.DeleteThreadRequest.displayName = 'proto.threads.net.pb.DeleteThreadRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.DeleteThreadReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.DeleteThreadReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.DeleteThreadReply.displayName = 'proto.threads.net.pb.DeleteThreadReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.AddReplicatorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.AddReplicatorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.AddReplicatorRequest.displayName = 'proto.threads.net.pb.AddReplicatorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.AddReplicatorReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.AddReplicatorReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.AddReplicatorReply.displayName = 'proto.threads.net.pb.AddReplicatorReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.CreateRecordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.CreateRecordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.CreateRecordRequest.displayName = 'proto.threads.net.pb.CreateRecordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.NewRecordReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.NewRecordReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.NewRecordReply.displayName = 'proto.threads.net.pb.NewRecordReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.AddRecordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.AddRecordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.AddRecordRequest.displayName = 'proto.threads.net.pb.AddRecordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.Record = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.Record, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.Record.displayName = 'proto.threads.net.pb.Record';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.AddRecordReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.AddRecordReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.AddRecordReply.displayName = 'proto.threads.net.pb.AddRecordReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.GetRecordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.GetRecordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.GetRecordRequest.displayName = 'proto.threads.net.pb.GetRecordRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.GetRecordReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.threads.net.pb.GetRecordReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.GetRecordReply.displayName = 'proto.threads.net.pb.GetRecordReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.threads.net.pb.SubscribeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.threads.net.pb.SubscribeRequest.repeatedFields_, null);
};
goog.inherits(proto.threads.net.pb.SubscribeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.threads.net.pb.SubscribeRequest.displayName = 'proto.threads.net.pb.SubscribeRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.GetHostIDRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.GetHostIDRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.GetHostIDRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetHostIDRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.GetHostIDRequest}
 */
proto.threads.net.pb.GetHostIDRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.GetHostIDRequest;
  return proto.threads.net.pb.GetHostIDRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.GetHostIDRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.GetHostIDRequest}
 */
proto.threads.net.pb.GetHostIDRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetHostIDRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.GetHostIDRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.GetHostIDRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetHostIDRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.GetHostIDReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.GetHostIDReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.GetHostIDReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetHostIDReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerid: msg.getPeerid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.GetHostIDReply}
 */
proto.threads.net.pb.GetHostIDReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.GetHostIDReply;
  return proto.threads.net.pb.GetHostIDReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.GetHostIDReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.GetHostIDReply}
 */
proto.threads.net.pb.GetHostIDReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetHostIDReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.GetHostIDReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.GetHostIDReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetHostIDReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes peerID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.GetHostIDReply.prototype.getPeerid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes peerID = 1;
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {string}
 */
proto.threads.net.pb.GetHostIDReply.prototype.getPeerid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerid()));
};


/**
 * optional bytes peerID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetHostIDReply.prototype.getPeerid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.GetHostIDReply} returns this
 */
proto.threads.net.pb.GetHostIDReply.prototype.setPeerid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.threads.net.pb.GetTokenRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.threads.net.pb.GetTokenRequest.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  KEY: 1,
  SIGNATURE: 2
};

/**
 * @return {proto.threads.net.pb.GetTokenRequest.PayloadCase}
 */
proto.threads.net.pb.GetTokenRequest.prototype.getPayloadCase = function() {
  return /** @type {proto.threads.net.pb.GetTokenRequest.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.threads.net.pb.GetTokenRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.GetTokenRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.GetTokenRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.GetTokenRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetTokenRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.GetTokenRequest}
 */
proto.threads.net.pb.GetTokenRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.GetTokenRequest;
  return proto.threads.net.pb.GetTokenRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.GetTokenRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.GetTokenRequest}
 */
proto.threads.net.pb.GetTokenRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetTokenRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.GetTokenRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.GetTokenRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetTokenRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.threads.net.pb.GetTokenRequest.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.net.pb.GetTokenRequest} returns this
 */
proto.threads.net.pb.GetTokenRequest.prototype.setKey = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.threads.net.pb.GetTokenRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.threads.net.pb.GetTokenRequest} returns this
 */
proto.threads.net.pb.GetTokenRequest.prototype.clearKey = function() {
  return jspb.Message.setOneofField(this, 1, proto.threads.net.pb.GetTokenRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.GetTokenRequest.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.GetTokenRequest.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.threads.net.pb.GetTokenRequest.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetTokenRequest.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.GetTokenRequest} returns this
 */
proto.threads.net.pb.GetTokenRequest.prototype.setSignature = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.threads.net.pb.GetTokenRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.threads.net.pb.GetTokenRequest} returns this
 */
proto.threads.net.pb.GetTokenRequest.prototype.clearSignature = function() {
  return jspb.Message.setOneofField(this, 2, proto.threads.net.pb.GetTokenRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.GetTokenRequest.prototype.hasSignature = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.threads.net.pb.GetTokenReply.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.threads.net.pb.GetTokenReply.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  CHALLENGE: 1,
  TOKEN: 2
};

/**
 * @return {proto.threads.net.pb.GetTokenReply.PayloadCase}
 */
proto.threads.net.pb.GetTokenReply.prototype.getPayloadCase = function() {
  return /** @type {proto.threads.net.pb.GetTokenReply.PayloadCase} */(jspb.Message.computeOneofCase(this, proto.threads.net.pb.GetTokenReply.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.GetTokenReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.GetTokenReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.GetTokenReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetTokenReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    challenge: msg.getChallenge_asB64(),
    token: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.GetTokenReply}
 */
proto.threads.net.pb.GetTokenReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.GetTokenReply;
  return proto.threads.net.pb.GetTokenReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.GetTokenReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.GetTokenReply}
 */
proto.threads.net.pb.GetTokenReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChallenge(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetTokenReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.GetTokenReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.GetTokenReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetTokenReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes challenge = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.GetTokenReply.prototype.getChallenge = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes challenge = 1;
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {string}
 */
proto.threads.net.pb.GetTokenReply.prototype.getChallenge_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChallenge()));
};


/**
 * optional bytes challenge = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChallenge()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetTokenReply.prototype.getChallenge_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChallenge()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.GetTokenReply} returns this
 */
proto.threads.net.pb.GetTokenReply.prototype.setChallenge = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.threads.net.pb.GetTokenReply.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.threads.net.pb.GetTokenReply} returns this
 */
proto.threads.net.pb.GetTokenReply.prototype.clearChallenge = function() {
  return jspb.Message.setOneofField(this, 1, proto.threads.net.pb.GetTokenReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.GetTokenReply.prototype.hasChallenge = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string token = 2;
 * @return {string}
 */
proto.threads.net.pb.GetTokenReply.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.threads.net.pb.GetTokenReply} returns this
 */
proto.threads.net.pb.GetTokenReply.prototype.setToken = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.threads.net.pb.GetTokenReply.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.threads.net.pb.GetTokenReply} returns this
 */
proto.threads.net.pb.GetTokenReply.prototype.clearToken = function() {
  return jspb.Message.setOneofField(this, 2, proto.threads.net.pb.GetTokenReply.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.GetTokenReply.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.CreateThreadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.CreateThreadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.CreateThreadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.CreateThreadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64(),
    keys: (f = msg.getKeys()) && proto.threads.net.pb.Keys.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.CreateThreadRequest}
 */
proto.threads.net.pb.CreateThreadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.CreateThreadRequest;
  return proto.threads.net.pb.CreateThreadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.CreateThreadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.CreateThreadRequest}
 */
proto.threads.net.pb.CreateThreadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 2:
      var value = new proto.threads.net.pb.Keys;
      reader.readMessage(value,proto.threads.net.pb.Keys.deserializeBinaryFromReader);
      msg.setKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.CreateThreadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.CreateThreadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.CreateThreadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.CreateThreadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.net.pb.Keys.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.CreateThreadRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.CreateThreadRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.CreateThreadRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.CreateThreadRequest} returns this
 */
proto.threads.net.pb.CreateThreadRequest.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Keys keys = 2;
 * @return {?proto.threads.net.pb.Keys}
 */
proto.threads.net.pb.CreateThreadRequest.prototype.getKeys = function() {
  return /** @type{?proto.threads.net.pb.Keys} */ (
    jspb.Message.getWrapperField(this, proto.threads.net.pb.Keys, 2));
};


/**
 * @param {?proto.threads.net.pb.Keys|undefined} value
 * @return {!proto.threads.net.pb.CreateThreadRequest} returns this
*/
proto.threads.net.pb.CreateThreadRequest.prototype.setKeys = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.net.pb.CreateThreadRequest} returns this
 */
proto.threads.net.pb.CreateThreadRequest.prototype.clearKeys = function() {
  return this.setKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.CreateThreadRequest.prototype.hasKeys = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.Keys.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.Keys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.Keys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.Keys.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadkey: msg.getThreadkey_asB64(),
    logkey: msg.getLogkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.Keys}
 */
proto.threads.net.pb.Keys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.Keys;
  return proto.threads.net.pb.Keys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.Keys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.Keys}
 */
proto.threads.net.pb.Keys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadkey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.Keys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.Keys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.Keys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.Keys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLogkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes threadKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.Keys.prototype.getThreadkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadKey = 1;
 * This is a type-conversion wrapper around `getThreadkey()`
 * @return {string}
 */
proto.threads.net.pb.Keys.prototype.getThreadkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadkey()));
};


/**
 * optional bytes threadKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadkey()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.Keys.prototype.getThreadkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.Keys} returns this
 */
proto.threads.net.pb.Keys.prototype.setThreadkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes logKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.Keys.prototype.getLogkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes logKey = 2;
 * This is a type-conversion wrapper around `getLogkey()`
 * @return {string}
 */
proto.threads.net.pb.Keys.prototype.getLogkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogkey()));
};


/**
 * optional bytes logKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogkey()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.Keys.prototype.getLogkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.Keys} returns this
 */
proto.threads.net.pb.Keys.prototype.setLogkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.net.pb.ThreadInfoReply.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.ThreadInfoReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.ThreadInfoReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.ThreadInfoReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64(),
    threadkey: msg.getThreadkey_asB64(),
    logsList: jspb.Message.toObjectList(msg.getLogsList(),
    proto.threads.net.pb.LogInfo.toObject, includeInstance),
    addrsList: msg.getAddrsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.ThreadInfoReply}
 */
proto.threads.net.pb.ThreadInfoReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.ThreadInfoReply;
  return proto.threads.net.pb.ThreadInfoReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.ThreadInfoReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.ThreadInfoReply}
 */
proto.threads.net.pb.ThreadInfoReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadkey(value);
      break;
    case 3:
      var value = new proto.threads.net.pb.LogInfo;
      reader.readMessage(value,proto.threads.net.pb.LogInfo.deserializeBinaryFromReader);
      msg.addLogs(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAddrs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.ThreadInfoReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.ThreadInfoReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.ThreadInfoReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getThreadkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getLogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.threads.net.pb.LogInfo.serializeBinaryToWriter
    );
  }
  f = message.getAddrsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.ThreadInfoReply} returns this
 */
proto.threads.net.pb.ThreadInfoReply.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes threadKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getThreadkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes threadKey = 2;
 * This is a type-conversion wrapper around `getThreadkey()`
 * @return {string}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getThreadkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadkey()));
};


/**
 * optional bytes threadKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadkey()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getThreadkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.ThreadInfoReply} returns this
 */
proto.threads.net.pb.ThreadInfoReply.prototype.setThreadkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated LogInfo logs = 3;
 * @return {!Array<!proto.threads.net.pb.LogInfo>}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getLogsList = function() {
  return /** @type{!Array<!proto.threads.net.pb.LogInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.threads.net.pb.LogInfo, 3));
};


/**
 * @param {!Array<!proto.threads.net.pb.LogInfo>} value
 * @return {!proto.threads.net.pb.ThreadInfoReply} returns this
*/
proto.threads.net.pb.ThreadInfoReply.prototype.setLogsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.threads.net.pb.LogInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.threads.net.pb.LogInfo}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.addLogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.threads.net.pb.LogInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.net.pb.ThreadInfoReply} returns this
 */
proto.threads.net.pb.ThreadInfoReply.prototype.clearLogsList = function() {
  return this.setLogsList([]);
};


/**
 * repeated bytes addrs = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getAddrsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes addrs = 4;
 * This is a type-conversion wrapper around `getAddrsList()`
 * @return {!Array<string>}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getAddrsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAddrsList()));
};


/**
 * repeated bytes addrs = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddrsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.net.pb.ThreadInfoReply.prototype.getAddrsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAddrsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.threads.net.pb.ThreadInfoReply} returns this
 */
proto.threads.net.pb.ThreadInfoReply.prototype.setAddrsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.threads.net.pb.ThreadInfoReply} returns this
 */
proto.threads.net.pb.ThreadInfoReply.prototype.addAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.net.pb.ThreadInfoReply} returns this
 */
proto.threads.net.pb.ThreadInfoReply.prototype.clearAddrsList = function() {
  return this.setAddrsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.net.pb.LogInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.LogInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.LogInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.LogInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.LogInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    pubkey: msg.getPubkey_asB64(),
    privkey: msg.getPrivkey_asB64(),
    addrsList: msg.getAddrsList_asB64(),
    head: msg.getHead_asB64(),
    counter: msg.getCounter_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.LogInfo}
 */
proto.threads.net.pb.LogInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.LogInfo;
  return proto.threads.net.pb.LogInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.LogInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.LogInfo}
 */
proto.threads.net.pb.LogInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrivkey(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addAddrs(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHead(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCounter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.LogInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.LogInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.LogInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.LogInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPrivkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAddrsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      4,
      f
    );
  }
  f = message.getHead_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getCounter_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.LogInfo.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.threads.net.pb.LogInfo.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.LogInfo.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.LogInfo} returns this
 */
proto.threads.net.pb.LogInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes pubKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.LogInfo.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pubKey = 2;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.threads.net.pb.LogInfo.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.LogInfo.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.LogInfo} returns this
 */
proto.threads.net.pb.LogInfo.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes privKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.LogInfo.prototype.getPrivkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes privKey = 3;
 * This is a type-conversion wrapper around `getPrivkey()`
 * @return {string}
 */
proto.threads.net.pb.LogInfo.prototype.getPrivkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrivkey()));
};


/**
 * optional bytes privKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrivkey()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.LogInfo.prototype.getPrivkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrivkey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.LogInfo} returns this
 */
proto.threads.net.pb.LogInfo.prototype.setPrivkey = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated bytes addrs = 4;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.net.pb.LogInfo.prototype.getAddrsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * repeated bytes addrs = 4;
 * This is a type-conversion wrapper around `getAddrsList()`
 * @return {!Array<string>}
 */
proto.threads.net.pb.LogInfo.prototype.getAddrsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getAddrsList()));
};


/**
 * repeated bytes addrs = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddrsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.net.pb.LogInfo.prototype.getAddrsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getAddrsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.threads.net.pb.LogInfo} returns this
 */
proto.threads.net.pb.LogInfo.prototype.setAddrsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.threads.net.pb.LogInfo} returns this
 */
proto.threads.net.pb.LogInfo.prototype.addAddrs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.net.pb.LogInfo} returns this
 */
proto.threads.net.pb.LogInfo.prototype.clearAddrsList = function() {
  return this.setAddrsList([]);
};


/**
 * optional bytes head = 5;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.LogInfo.prototype.getHead = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes head = 5;
 * This is a type-conversion wrapper around `getHead()`
 * @return {string}
 */
proto.threads.net.pb.LogInfo.prototype.getHead_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHead()));
};


/**
 * optional bytes head = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHead()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.LogInfo.prototype.getHead_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHead()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.LogInfo} returns this
 */
proto.threads.net.pb.LogInfo.prototype.setHead = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional bytes counter = 6;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.LogInfo.prototype.getCounter = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes counter = 6;
 * This is a type-conversion wrapper around `getCounter()`
 * @return {string}
 */
proto.threads.net.pb.LogInfo.prototype.getCounter_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCounter()));
};


/**
 * optional bytes counter = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCounter()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.LogInfo.prototype.getCounter_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCounter()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.LogInfo} returns this
 */
proto.threads.net.pb.LogInfo.prototype.setCounter = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.AddThreadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.AddThreadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.AddThreadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddThreadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    addr: msg.getAddr_asB64(),
    keys: (f = msg.getKeys()) && proto.threads.net.pb.Keys.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.AddThreadRequest}
 */
proto.threads.net.pb.AddThreadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.AddThreadRequest;
  return proto.threads.net.pb.AddThreadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.AddThreadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.AddThreadRequest}
 */
proto.threads.net.pb.AddThreadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddr(value);
      break;
    case 2:
      var value = new proto.threads.net.pb.Keys;
      reader.readMessage(value,proto.threads.net.pb.Keys.deserializeBinaryFromReader);
      msg.setKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddThreadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.AddThreadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.AddThreadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddThreadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getKeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.threads.net.pb.Keys.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.AddThreadRequest.prototype.getAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes addr = 1;
 * This is a type-conversion wrapper around `getAddr()`
 * @return {string}
 */
proto.threads.net.pb.AddThreadRequest.prototype.getAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddr()));
};


/**
 * optional bytes addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddr()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddThreadRequest.prototype.getAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.AddThreadRequest} returns this
 */
proto.threads.net.pb.AddThreadRequest.prototype.setAddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Keys keys = 2;
 * @return {?proto.threads.net.pb.Keys}
 */
proto.threads.net.pb.AddThreadRequest.prototype.getKeys = function() {
  return /** @type{?proto.threads.net.pb.Keys} */ (
    jspb.Message.getWrapperField(this, proto.threads.net.pb.Keys, 2));
};


/**
 * @param {?proto.threads.net.pb.Keys|undefined} value
 * @return {!proto.threads.net.pb.AddThreadRequest} returns this
*/
proto.threads.net.pb.AddThreadRequest.prototype.setKeys = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.net.pb.AddThreadRequest} returns this
 */
proto.threads.net.pb.AddThreadRequest.prototype.clearKeys = function() {
  return this.setKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.AddThreadRequest.prototype.hasKeys = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.GetThreadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.GetThreadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.GetThreadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetThreadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.GetThreadRequest}
 */
proto.threads.net.pb.GetThreadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.GetThreadRequest;
  return proto.threads.net.pb.GetThreadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.GetThreadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.GetThreadRequest}
 */
proto.threads.net.pb.GetThreadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetThreadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.GetThreadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.GetThreadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetThreadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.GetThreadRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.GetThreadRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetThreadRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.GetThreadRequest} returns this
 */
proto.threads.net.pb.GetThreadRequest.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.PullThreadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.PullThreadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.PullThreadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.PullThreadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.PullThreadRequest}
 */
proto.threads.net.pb.PullThreadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.PullThreadRequest;
  return proto.threads.net.pb.PullThreadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.PullThreadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.PullThreadRequest}
 */
proto.threads.net.pb.PullThreadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.PullThreadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.PullThreadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.PullThreadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.PullThreadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.PullThreadRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.PullThreadRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.PullThreadRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.PullThreadRequest} returns this
 */
proto.threads.net.pb.PullThreadRequest.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.PullThreadReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.PullThreadReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.PullThreadReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.PullThreadReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.PullThreadReply}
 */
proto.threads.net.pb.PullThreadReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.PullThreadReply;
  return proto.threads.net.pb.PullThreadReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.PullThreadReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.PullThreadReply}
 */
proto.threads.net.pb.PullThreadReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.PullThreadReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.PullThreadReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.PullThreadReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.PullThreadReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.DeleteThreadRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.DeleteThreadRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.DeleteThreadRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.DeleteThreadRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.DeleteThreadRequest}
 */
proto.threads.net.pb.DeleteThreadRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.DeleteThreadRequest;
  return proto.threads.net.pb.DeleteThreadRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.DeleteThreadRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.DeleteThreadRequest}
 */
proto.threads.net.pb.DeleteThreadRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.DeleteThreadRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.DeleteThreadRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.DeleteThreadRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.DeleteThreadRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.DeleteThreadRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.DeleteThreadRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.DeleteThreadRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.DeleteThreadRequest} returns this
 */
proto.threads.net.pb.DeleteThreadRequest.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.DeleteThreadReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.DeleteThreadReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.DeleteThreadReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.DeleteThreadReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.DeleteThreadReply}
 */
proto.threads.net.pb.DeleteThreadReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.DeleteThreadReply;
  return proto.threads.net.pb.DeleteThreadReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.DeleteThreadReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.DeleteThreadReply}
 */
proto.threads.net.pb.DeleteThreadReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.DeleteThreadReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.DeleteThreadReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.DeleteThreadReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.DeleteThreadReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.AddReplicatorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.AddReplicatorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddReplicatorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64(),
    addr: msg.getAddr_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.AddReplicatorRequest}
 */
proto.threads.net.pb.AddReplicatorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.AddReplicatorRequest;
  return proto.threads.net.pb.AddReplicatorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.AddReplicatorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.AddReplicatorRequest}
 */
proto.threads.net.pb.AddReplicatorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAddr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.AddReplicatorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.AddReplicatorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddReplicatorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.AddReplicatorRequest} returns this
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes addr = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.getAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes addr = 2;
 * This is a type-conversion wrapper around `getAddr()`
 * @return {string}
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.getAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAddr()));
};


/**
 * optional bytes addr = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAddr()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.getAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAddr()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.AddReplicatorRequest} returns this
 */
proto.threads.net.pb.AddReplicatorRequest.prototype.setAddr = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.AddReplicatorReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.AddReplicatorReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.AddReplicatorReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddReplicatorReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerid: msg.getPeerid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.AddReplicatorReply}
 */
proto.threads.net.pb.AddReplicatorReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.AddReplicatorReply;
  return proto.threads.net.pb.AddReplicatorReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.AddReplicatorReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.AddReplicatorReply}
 */
proto.threads.net.pb.AddReplicatorReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPeerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddReplicatorReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.AddReplicatorReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.AddReplicatorReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddReplicatorReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes peerID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.AddReplicatorReply.prototype.getPeerid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes peerID = 1;
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {string}
 */
proto.threads.net.pb.AddReplicatorReply.prototype.getPeerid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPeerid()));
};


/**
 * optional bytes peerID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddReplicatorReply.prototype.getPeerid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPeerid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.AddReplicatorReply} returns this
 */
proto.threads.net.pb.AddReplicatorReply.prototype.setPeerid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.CreateRecordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.CreateRecordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.CreateRecordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.CreateRecordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64(),
    body: msg.getBody_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.CreateRecordRequest}
 */
proto.threads.net.pb.CreateRecordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.CreateRecordRequest;
  return proto.threads.net.pb.CreateRecordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.CreateRecordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.CreateRecordRequest}
 */
proto.threads.net.pb.CreateRecordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.CreateRecordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.CreateRecordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.CreateRecordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.CreateRecordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getBody_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.CreateRecordRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.CreateRecordRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.CreateRecordRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.CreateRecordRequest} returns this
 */
proto.threads.net.pb.CreateRecordRequest.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes body = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.CreateRecordRequest.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes body = 2;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.threads.net.pb.CreateRecordRequest.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * optional bytes body = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.CreateRecordRequest.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.CreateRecordRequest} returns this
 */
proto.threads.net.pb.CreateRecordRequest.prototype.setBody = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.NewRecordReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.NewRecordReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.NewRecordReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.NewRecordReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64(),
    logid: msg.getLogid_asB64(),
    record: (f = msg.getRecord()) && proto.threads.net.pb.Record.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.NewRecordReply}
 */
proto.threads.net.pb.NewRecordReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.NewRecordReply;
  return proto.threads.net.pb.NewRecordReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.NewRecordReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.NewRecordReply}
 */
proto.threads.net.pb.NewRecordReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogid(value);
      break;
    case 3:
      var value = new proto.threads.net.pb.Record;
      reader.readMessage(value,proto.threads.net.pb.Record.deserializeBinaryFromReader);
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.NewRecordReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.NewRecordReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.NewRecordReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.NewRecordReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLogid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRecord();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.threads.net.pb.Record.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.NewRecordReply.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.NewRecordReply.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.NewRecordReply.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.NewRecordReply} returns this
 */
proto.threads.net.pb.NewRecordReply.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes logID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.NewRecordReply.prototype.getLogid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes logID = 2;
 * This is a type-conversion wrapper around `getLogid()`
 * @return {string}
 */
proto.threads.net.pb.NewRecordReply.prototype.getLogid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogid()));
};


/**
 * optional bytes logID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.NewRecordReply.prototype.getLogid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.NewRecordReply} returns this
 */
proto.threads.net.pb.NewRecordReply.prototype.setLogid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Record record = 3;
 * @return {?proto.threads.net.pb.Record}
 */
proto.threads.net.pb.NewRecordReply.prototype.getRecord = function() {
  return /** @type{?proto.threads.net.pb.Record} */ (
    jspb.Message.getWrapperField(this, proto.threads.net.pb.Record, 3));
};


/**
 * @param {?proto.threads.net.pb.Record|undefined} value
 * @return {!proto.threads.net.pb.NewRecordReply} returns this
*/
proto.threads.net.pb.NewRecordReply.prototype.setRecord = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.net.pb.NewRecordReply} returns this
 */
proto.threads.net.pb.NewRecordReply.prototype.clearRecord = function() {
  return this.setRecord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.NewRecordReply.prototype.hasRecord = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.AddRecordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.AddRecordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.AddRecordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddRecordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64(),
    logid: msg.getLogid_asB64(),
    record: (f = msg.getRecord()) && proto.threads.net.pb.Record.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.AddRecordRequest}
 */
proto.threads.net.pb.AddRecordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.AddRecordRequest;
  return proto.threads.net.pb.AddRecordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.AddRecordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.AddRecordRequest}
 */
proto.threads.net.pb.AddRecordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLogid(value);
      break;
    case 3:
      var value = new proto.threads.net.pb.Record;
      reader.readMessage(value,proto.threads.net.pb.Record.deserializeBinaryFromReader);
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddRecordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.AddRecordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.AddRecordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddRecordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLogid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getRecord();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.threads.net.pb.Record.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.AddRecordRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.AddRecordRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddRecordRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.AddRecordRequest} returns this
 */
proto.threads.net.pb.AddRecordRequest.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes logID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.AddRecordRequest.prototype.getLogid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes logID = 2;
 * This is a type-conversion wrapper around `getLogid()`
 * @return {string}
 */
proto.threads.net.pb.AddRecordRequest.prototype.getLogid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLogid()));
};


/**
 * optional bytes logID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLogid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddRecordRequest.prototype.getLogid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLogid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.AddRecordRequest} returns this
 */
proto.threads.net.pb.AddRecordRequest.prototype.setLogid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional Record record = 3;
 * @return {?proto.threads.net.pb.Record}
 */
proto.threads.net.pb.AddRecordRequest.prototype.getRecord = function() {
  return /** @type{?proto.threads.net.pb.Record} */ (
    jspb.Message.getWrapperField(this, proto.threads.net.pb.Record, 3));
};


/**
 * @param {?proto.threads.net.pb.Record|undefined} value
 * @return {!proto.threads.net.pb.AddRecordRequest} returns this
*/
proto.threads.net.pb.AddRecordRequest.prototype.setRecord = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.net.pb.AddRecordRequest} returns this
 */
proto.threads.net.pb.AddRecordRequest.prototype.clearRecord = function() {
  return this.setRecord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.AddRecordRequest.prototype.hasRecord = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.Record.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.Record.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.Record} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.Record.toObject = function(includeInstance, msg) {
  var f, obj = {
    recordnode: msg.getRecordnode_asB64(),
    eventnode: msg.getEventnode_asB64(),
    headernode: msg.getHeadernode_asB64(),
    bodynode: msg.getBodynode_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.Record}
 */
proto.threads.net.pb.Record.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.Record;
  return proto.threads.net.pb.Record.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.Record} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.Record}
 */
proto.threads.net.pb.Record.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecordnode(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEventnode(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeadernode(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodynode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.Record.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.Record.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.Record} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.Record.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecordnode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getEventnode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getHeadernode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getBodynode_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bytes recordNode = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.Record.prototype.getRecordnode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes recordNode = 1;
 * This is a type-conversion wrapper around `getRecordnode()`
 * @return {string}
 */
proto.threads.net.pb.Record.prototype.getRecordnode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecordnode()));
};


/**
 * optional bytes recordNode = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecordnode()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.Record.prototype.getRecordnode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecordnode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.Record} returns this
 */
proto.threads.net.pb.Record.prototype.setRecordnode = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes eventNode = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.Record.prototype.getEventnode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes eventNode = 2;
 * This is a type-conversion wrapper around `getEventnode()`
 * @return {string}
 */
proto.threads.net.pb.Record.prototype.getEventnode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEventnode()));
};


/**
 * optional bytes eventNode = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEventnode()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.Record.prototype.getEventnode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEventnode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.Record} returns this
 */
proto.threads.net.pb.Record.prototype.setEventnode = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes headerNode = 3;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.Record.prototype.getHeadernode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes headerNode = 3;
 * This is a type-conversion wrapper around `getHeadernode()`
 * @return {string}
 */
proto.threads.net.pb.Record.prototype.getHeadernode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeadernode()));
};


/**
 * optional bytes headerNode = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeadernode()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.Record.prototype.getHeadernode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeadernode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.Record} returns this
 */
proto.threads.net.pb.Record.prototype.setHeadernode = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional bytes bodyNode = 4;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.Record.prototype.getBodynode = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes bodyNode = 4;
 * This is a type-conversion wrapper around `getBodynode()`
 * @return {string}
 */
proto.threads.net.pb.Record.prototype.getBodynode_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodynode()));
};


/**
 * optional bytes bodyNode = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodynode()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.Record.prototype.getBodynode_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodynode()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.Record} returns this
 */
proto.threads.net.pb.Record.prototype.setBodynode = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.AddRecordReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.AddRecordReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.AddRecordReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddRecordReply.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.AddRecordReply}
 */
proto.threads.net.pb.AddRecordReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.AddRecordReply;
  return proto.threads.net.pb.AddRecordReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.AddRecordReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.AddRecordReply}
 */
proto.threads.net.pb.AddRecordReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.AddRecordReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.AddRecordReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.AddRecordReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.AddRecordReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.GetRecordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.GetRecordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.GetRecordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetRecordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadid: msg.getThreadid_asB64(),
    recordid: msg.getRecordid_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.GetRecordRequest}
 */
proto.threads.net.pb.GetRecordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.GetRecordRequest;
  return proto.threads.net.pb.GetRecordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.GetRecordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.GetRecordRequest}
 */
proto.threads.net.pb.GetRecordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThreadid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRecordid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetRecordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.GetRecordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.GetRecordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetRecordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getRecordid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes threadID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.GetRecordRequest.prototype.getThreadid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes threadID = 1;
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {string}
 */
proto.threads.net.pb.GetRecordRequest.prototype.getThreadid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThreadid()));
};


/**
 * optional bytes threadID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetRecordRequest.prototype.getThreadid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThreadid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.GetRecordRequest} returns this
 */
proto.threads.net.pb.GetRecordRequest.prototype.setThreadid = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes recordID = 2;
 * @return {!(string|Uint8Array)}
 */
proto.threads.net.pb.GetRecordRequest.prototype.getRecordid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes recordID = 2;
 * This is a type-conversion wrapper around `getRecordid()`
 * @return {string}
 */
proto.threads.net.pb.GetRecordRequest.prototype.getRecordid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRecordid()));
};


/**
 * optional bytes recordID = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRecordid()`
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetRecordRequest.prototype.getRecordid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRecordid()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.threads.net.pb.GetRecordRequest} returns this
 */
proto.threads.net.pb.GetRecordRequest.prototype.setRecordid = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.GetRecordReply.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.GetRecordReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.GetRecordReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetRecordReply.toObject = function(includeInstance, msg) {
  var f, obj = {
    record: (f = msg.getRecord()) && proto.threads.net.pb.Record.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.GetRecordReply}
 */
proto.threads.net.pb.GetRecordReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.GetRecordReply;
  return proto.threads.net.pb.GetRecordReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.GetRecordReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.GetRecordReply}
 */
proto.threads.net.pb.GetRecordReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.threads.net.pb.Record;
      reader.readMessage(value,proto.threads.net.pb.Record.deserializeBinaryFromReader);
      msg.setRecord(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.GetRecordReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.GetRecordReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.GetRecordReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.GetRecordReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecord();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.threads.net.pb.Record.serializeBinaryToWriter
    );
  }
};


/**
 * optional Record record = 1;
 * @return {?proto.threads.net.pb.Record}
 */
proto.threads.net.pb.GetRecordReply.prototype.getRecord = function() {
  return /** @type{?proto.threads.net.pb.Record} */ (
    jspb.Message.getWrapperField(this, proto.threads.net.pb.Record, 1));
};


/**
 * @param {?proto.threads.net.pb.Record|undefined} value
 * @return {!proto.threads.net.pb.GetRecordReply} returns this
*/
proto.threads.net.pb.GetRecordReply.prototype.setRecord = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.threads.net.pb.GetRecordReply} returns this
 */
proto.threads.net.pb.GetRecordReply.prototype.clearRecord = function() {
  return this.setRecord(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.threads.net.pb.GetRecordReply.prototype.hasRecord = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.threads.net.pb.SubscribeRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.threads.net.pb.SubscribeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.threads.net.pb.SubscribeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.threads.net.pb.SubscribeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.SubscribeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    threadidsList: msg.getThreadidsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.threads.net.pb.SubscribeRequest}
 */
proto.threads.net.pb.SubscribeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.threads.net.pb.SubscribeRequest;
  return proto.threads.net.pb.SubscribeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.threads.net.pb.SubscribeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.threads.net.pb.SubscribeRequest}
 */
proto.threads.net.pb.SubscribeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addThreadids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.threads.net.pb.SubscribeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.threads.net.pb.SubscribeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.threads.net.pb.SubscribeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.threads.net.pb.SubscribeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreadidsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
};


/**
 * repeated bytes threadIDs = 1;
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.threads.net.pb.SubscribeRequest.prototype.getThreadidsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes threadIDs = 1;
 * This is a type-conversion wrapper around `getThreadidsList()`
 * @return {!Array<string>}
 */
proto.threads.net.pb.SubscribeRequest.prototype.getThreadidsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getThreadidsList()));
};


/**
 * repeated bytes threadIDs = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThreadidsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.threads.net.pb.SubscribeRequest.prototype.getThreadidsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getThreadidsList()));
};


/**
 * @param {!(Array<!Uint8Array>|Array<string>)} value
 * @return {!proto.threads.net.pb.SubscribeRequest} returns this
 */
proto.threads.net.pb.SubscribeRequest.prototype.setThreadidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 * @return {!proto.threads.net.pb.SubscribeRequest} returns this
 */
proto.threads.net.pb.SubscribeRequest.prototype.addThreadids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.threads.net.pb.SubscribeRequest} returns this
 */
proto.threads.net.pb.SubscribeRequest.prototype.clearThreadidsList = function() {
  return this.setThreadidsList([]);
};


goog.object.extend(exports, proto.threads.net.pb);
